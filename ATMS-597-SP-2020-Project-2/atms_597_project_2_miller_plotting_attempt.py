# -*- coding: utf-8 -*-
"""ATMS_597_Project_2_Miller_Plotting_Attempt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nQ1FWAblfBZKtJGw8udBG3HDr6ZHJngL
"""

import numpy as np
import pandas as pd
import datetime

import requests

def make_request(endpoint, payload=None):
    """
    Make a request to a specific endpoint on the weather API
    passing headers and optional payload.
    
    Parameters:
        - endpoint: The endpoint of the API you want to 
                    make a GET request to.
        - payload: A dictionary of data to pass along 
                   with the request.
    
    Returns:
        Response object.
    """
    return requests.get(
        f'https://www.ncdc.noaa.gov/cdo-web/api/v2/'+endpoint,
        headers={
            'token': 'yicVcIaiwUAgtBveaBtWSaioiQvqRJRh'
        },
        params=payload
    )

# This cell will request locations. We used this to find the locationid for Champaign, IL area.
# !!!No need to run this cell again unless we want to look up a new locationid!!!

response = make_request(
    'locations', 
    {
        'datasetid' : 'GHCND', 
        'locationcategoryid' : 'CITY',
        'datacategoryid' : 'TEMP',
        'sortorder' : 'desc',
        'limit' : 1000 # max allowed
    }
)
response.json()

# This cell will request stations. We used this to find the stationid for Rantoul, IL station.
# !!!No need to run this cell again unless we want to look up a new stationid!!!

response = make_request(
    'stations', 
    {
        'datasetid' : 'GHCND',
        'locationid' : 'CITY:US170004', 
        'datacategoryid' : 'TEMP',
        'limit' : 1000 # max allowed
    }
)
response.json()

response.json()



# Create lists containing the beginning and end of years we want to loop over.
 
yearstoget = np.arange(1949,2020)
currentlist = []
endlist = []
for i in yearstoget:
    currentlist.append(datetime.date(i, 1, 1))
    endlist.append(datetime.date(i, 12, 31))

# This cell will request the data

results = [] # get an empty list to fill with data
numloops = np.arange(len(currentlist)) # fill a numper array with the length of the list of years we want

#Start the loop over the years we want
for i in numloops:
    current = currentlist[i] # set current to the beginning of the year in our loop
    end = endlist[i] # set end to the end of the year in our loop
    # update the cell with status information
    #display.clear_output(wait=True)
    #display.display(f'Gathering data for {str(current)}')
    response = make_request(
        'data', 
        {
            'datasetid' : 'GHCND', # Global Historical Climatology Network - Daily (GHCND) dataset
            'datatypeid' : 'TMAX',
            'stationid' : 'GHCND:USW00014806',
            'startdate' : current,
            'enddate' : end,
            'units' : 'metric',
            'limit' : 1000 # max allowed
        }
    )
    response.json()
    results.extend(response.json()['results']) # put the data in the results list

len(results) # check the length of the results list to make sure we have the correct number of days

# Put the results in a pandas dataframe
df = pd.DataFrame(results)
df.head()

###Rylan's code for getting Yearly Average Temperature goes here. ###

df.to_csv('Rantoul.csv')

df = pd.DataFrame(results)
 
df['date']= pd.to_datetime(df['date']) 
df.index = df['date']
 
del df['datatype']
del df['station']
del df['attributes']
#del df['date']
 
df.columns = ['date','TMAX']
df.to_csv('project2_data_TMAX')
 
df.tail()

df = df.groupby(pd.Grouper(freq='Y')).mean()
df.columns = ['Yearly Average Temperature']
df.to_csv('project_2_Tavg')
df

df = df.groupby(pd.Grouper(freq='Y')).mean()
df.index = pd.to_datetime(df.index, format='%Y-%m-%d').year
df.columns = ['Yearly Average Temperature']
df['Anomalies'] = (df['Yearly Average Temperature'] - df['Yearly Average Temperature'].mean())
df


import seaborn as sns
import matplotlib.pyplot as plt
 
#plt.figure(figsize=(12, 5))
fig, ax = plt.subplots(figsize=(12,5))
#ax2 = plt.twinx()
 
sns.heatmap(data=df['Anomalies'][np.newaxis,:], cmap='coolwarm', cbar=False, vmin= -3, vmax=3, center=0,
                 xticklabels=False, yticklabels=False, ax = ax)
sns.lineplot(x=df.index, y=df['Anomalies'], color='Black', ax = ax)
 
plt.tight_layout()
plt.show()







# link https://matplotlib.org/matplotblog/posts/warming-stripes/?fbclid=IwAR3LquBo6VNlCuZdUE-7v58V5wLrK3Moxvg2qLEb6zj49qiCxiDRBFt0DB4











