# -*- coding: utf-8 -*-
"""ATMS_597_Project_2_Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DKlyWZJ9ohDhpW0q2hUkapze9eAOkKMB

### ATMS 597 Project 2: Making Climate Stripes
Created by: Kevin Gray, Rylan Housenga, Rose Miller

###Import packages
"""

import numpy as np
import pandas as pd
import datetime

"""## Run API Request"""

import requests

def make_request(endpoint, payload=None):
    """
    Make a request to a specific endpoint on the weather API
    passing headers and optional payload.
    
    Parameters:
        - endpoint: The endpoint of the API you want to 
                    make a GET request to.
        - payload: A dictionary of data to pass along 
                   with the request.
    
    Returns:
        Response object.
    """
    return requests.get(
        f'https://www.ncdc.noaa.gov/cdo-web/api/v2/'+endpoint,
        headers={
            'token': 'yicVcIaiwUAgtBveaBtWSaioiQvqRJRh'
        },
        params=payload
    )

"""### Cell to look up locationID"""

### This cell will request locations. We used this to find the locationid for Champaign, IL area.
# !!!No need to run this cell again unless we want to look up a new locationid!!!

response = make_request(
    'locations', 
    {
        'datasetid' : 'GHCND', 
        'locationcategoryid' : 'CITY',
        'datacategoryid' : 'TEMP',
        'sortorder' : 'desc',
        'limit' : 1000 # max allowed
    }
)
response.json()

"""### Cell to look up stationID"""

# This cell will request stations. We used this to find the stationid for Rantoul, IL station.
# !!!No need to run this cell again unless we want to look up a new stationid!!!

response = make_request(
    'stations', 
    {
        'datasetid' : 'GHCND',
        'locationid' : 'CITY:US170004', 
        'datacategoryid' : 'TEMP',
        'limit' : 1000 # max allowed
    }
)
response.json()

"""## Example of running data for Rantoul, IL"""

# Create lists containing the beginning and end of years we want to loop over.

yearstoget = np.arange(1949,2020)
currentlist = []
endlist = []
for i in yearstoget:
    currentlist.append(datetime.date(i, 1, 1))
    endlist.append(datetime.date(i, 12, 31))

# This cell will request the data

resultsmax = [] # get an empty list to fill with data
numloops = np.arange(len(currentlist)) # fill a numpy array with the length of the list of years we want

#Start the loop over the years we want
for i in numloops:
    print(currentlist[i])
    current = currentlist[i] # set current to the beginning of the year in our loop
    end = endlist[i] # set end to the end of the year in our loop
    # update the cell with status information
    #display.clear_output(wait=True)
    #display.display(f'Gathering data for {str(current)}')
    response = make_request(
        'data', 
        {
            'datasetid' : 'GHCND', # Global Historical Climatology Network - Daily (GHCND) dataset
            'datatypeid' : 'TMAX',
            'stationid' : 'GHCND:USW00014806',
            'startdate' : current,
            'enddate' : end,
            'units' : 'metric',
            'limit' : 1000 # max allowed
        }
    )
    response.json()
    resultsmax.extend(response.json()['results']) # put the data in the results list

# This cell will request the data

resultsmin = [] # get an empty list to fill with data
numloops = np.arange(len(currentlist)) # fill a numpy array with the length of the list of years we want

#Start the loop over the years we want
for i in numloops:
    print(currentlist[i])
    current = currentlist[i] # set current to the beginning of the year in our loop
    end = endlist[i] # set end to the end of the year in our loop
    # update the cell with status information
    #display.clear_output(wait=True)
    #display.display(f'Gathering data for {str(current)}')
    response = make_request(
        'data', 
        {
            'datasetid' : 'GHCND', # Global Historical Climatology Network - Daily (GHCND) dataset
            'datatypeid' : 'TMIN',
            'stationid' : 'GHCND:USW00014806',
            'startdate' : current,
            'enddate' : end,
            'units' : 'metric',
            'limit' : 1000 # max allowed
        }
    )
    response.json()
    resultsmin.extend(response.json()['results']) # put the data in the results list

len(resultsmax) # check the length of the results list to make sure we have the correct number of days

"""## Creates dataframe with just Date and TAVG"""

# Put data imported into pandas DataFrames
 
df = pd.DataFrame(resultsmax)
df2 = pd.DataFrame(resultsmin)
 
# Change date columns to datetime format and make those columns the index

df['date']= pd.to_datetime(df['date']) 
df.index = df['date']
df2['date']= pd.to_datetime(df2['date']) 
df2.index = df2['date']

# Clean up dataframes

del df['datatype']
del df['station']
del df['attributes']
del df2['datatype']
del df2['station']
del df2['attributes']

# Change column names

df.columns = ['date','TMAX']
df2.columns = ['date','TMIN']

# Add TMIN column to TMAX dataframe & create a new column that displays the average temperature 
# We no longer need df2 since all of our data is now in one dataframe

df['TMIN'] = df2['TMIN']
df['TAVG'] = ((df['TMIN'] + df['TMAX'])/2)

# Clean up new dataframe so only the index (date) and TAVG columns exist
 
del df['TMAX']
del df['TMIN']
del df['date']
 
df.head()

"""## Manually chose frequency for temperature averages. Ex: (Yearly, Monthly) by changing the avgfreg variable."""

# Choose the frequency that you want averages for
avgfreq = 'Y'
#avgfreq = 'M'
#avgfreq = 'W'
if avgfreq == 'Y':
    headername = 'Yearly Average Temperature'
    numperyear = 1
if avgfreq == 'M':
    headername = 'Monthly Average Temperature'
    numperyear = 12
if avgfreq == 'W':
    headername = 'Weekly Average Temperature'

# Creates temperature anomalies
df = df.groupby(pd.Grouper(freq=avgfreq)).mean()
df.index = pd.to_datetime(df.index, format='%Y-%m-%d').year
df.columns = [headername]
df['Anomalies'] = (df[headername] - df[headername].mean())
df

# A cell for quickly checking the min and max anomalies for color scale purposes.
print(min(df['Anomalies'].values))
print(max(df['Anomalies'].values))

"""## This cell checks for any data anomalies that may affect anomalies data. It then lets you chose your own anomaly values."""

print(df.nlargest(5,'Anomalies'))
print(df.nsmallest(5,'Anomalies'))

"""## Plotting our climate stripes. Remember to set vmin and vmax values to avoid dates that do not have full datasets"""

import matplotlib.pyplot as plt
 
plt.figure(figsize=(12,10))
 
#df['Anomalies'].values
ax = plt.matshow(df['Anomalies'][np.newaxis,:], cmap='coolwarm', aspect = 'auto', vmin = -3, vmax = 3)
ax.axes.get_yaxis().set_visible(False)
ax.axes.set_xticklabels(yearstoget[0::10])
ax.axes.tick_params(axis="x", bottom=True, top=False, labelbottom=True, labeltop=False)
ax.axes.set_xlim(left = 0, right = len(yearstoget)-1)
ax.axes.set_xlabel('Year') 
#x_pos = np.arange(len(df['Anomalies']))
#plt.xticks(yearstoget)
ax2 = plt.twinx()
ax2.plot(np.arange(0,len(yearstoget)), df[headername], color = 'black')
ax2.plot(np.arange(0,len(yearstoget)), df[headername], 'ko')
ax2.axes.set_ylabel('Average annual \n maximum temperature \n (deg C)')
 
plt.show()

